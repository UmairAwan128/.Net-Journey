using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;

namespace EmployeeMgt_CRUD
{
    //first see startUp4.cs
    public class Startup5
    {
        // This method gets called by the runtime. Use this method to add services to the container.
        // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940
        public void ConfigureServices(IServiceCollection services)
        {
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env) 
        {
            //if the environment of application is development then run the code inside
            if (env.IsDevelopment())
            {
                //here we have a predefined exception page which will only work if there is any exception in our application 
                //and show that error that occur in the application or in the request procesing pipline the error page also have some related info of error
                //e.g lineNo linesBefore/after the line causing the error,stackTrace,queryString,httpHeader.

                ////this middleware should be plugged into the request processing pipline as eary as possible as we know 
                ////exception will be generated by later midlewares so when that response/exception comes here this middleware
                ////will show that exception/error on DeveloperException page.
                // app.UseDeveloperExceptionPage();

                //to coustomize this middleware e.g how many line will be shown before and after the line that is causing error/exception.
                DeveloperExceptionPageOptions developerExceptionPageOptions = new DeveloperExceptionPageOptions();
                developerExceptionPageOptions.SourceCodeLineCount = 10; //show 10 lines before and after the line that is causing error/exception
                app.UseDeveloperExceptionPage(developerExceptionPageOptions);
            }

            FileServerOptions fileServerOptions = new FileServerOptions();
            fileServerOptions.DefaultFilesOptions.DefaultFileNames.Clear();
            fileServerOptions.DefaultFilesOptions.DefaultFileNames.Add("foo.html");
            app.UseFileServer(fileServerOptions);


           
            //if this is the only middleware here all the requests will be handled by it also it has not any condition and it just returns a msg as response
            //so any url like "http://localhost:49371/","http://localhost:49371/asd","http://localhost:49371/as/asd/ada",
            // even url for file "http://localhost:49371/home.jpg"  can be handled by this middleware.
            app.Run(async (context) =>
            {
                //app.Run() is called a TerminalMiddleware i.e when request comes here it will generate response and will not
                //call the next middlewares so we should use this at the end.

                //this will raise an exception that will be handled by middleware app.UseDeveloperExceptionPage();
                //and this middleware will show the error on a predefined page this page will also have some related info
                //of error e.g lineNo linesBefore/after the line causing the error,stackTrace,queryString,httpHeader.
                throw new Exception("Error occured while processing the request."); //to throw type any url except
                // this http://localhost:49371/ as it will show file foo.html so use this this also has query 
                //string parameters passed http://localhost:49371/coust?a=3&b=9
                await context.Response.WriteAsync("Hello world");
            });

        }
    }
}
